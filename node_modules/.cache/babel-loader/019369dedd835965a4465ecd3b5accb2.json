{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nexport const fetchSuggestion1 = console.log(\"Hello\");\nexport const fetchSuggestion = createAsyncThunk(\n/* Task 15: Complete the `createAsyncThunk()` function to load a suggestion from this URL: http://localhost:3004/api/suggestion */\n'suggestion/fetchSuggestion', async () => {\n  console.log(\"createAsyncThunk\");\n  const response = await fetch(\"http://localhost:3004/api/suggestion\");\n  const jsonresponse = await response.json();\n  console.log(\"Hello\" + jsonresponse.status);\n  return jsonresponse;\n});\nconst initialState = {\n  suggestion: '',\n  loading: false,\n  error: true\n};\nconst options = {\n  name: 'suggestion',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchSuggestion.pending, state => {\n      console.log(state.status);\n      state.status = 'loading';\n    }).addCase(fetchSuggestion.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      console.log(action.payload);\n      state.suggestion = action.payload;\n      console.log(state.suggestion);\n    }).addCase(fetchSuggestion.rejected, (state, action) => {\n      console.log(state.status);\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n};\nconst suggestionSlice = createSlice(options);\nexport default suggestionSlice.reducer; // Task 17: Create a selector, called `selectSuggestion`, for the `suggestion` state variable and export it from the file\n\nexport const selectSuggestion = state => state.suggestion.suggestion;\nexport const selectLoading = state => state.suggestion.loading;\nexport const selectError = state => state.suggestion.error;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchSuggestion1","console","log","fetchSuggestion","response","fetch","jsonresponse","json","status","initialState","suggestion","loading","error","options","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","suggestionSlice","reducer","selectSuggestion","selectLoading","selectError"],"sources":["/Users/sshakkari/Documents/Thinkful/Redux/assessment/starter-redux-assessment/src/features/suggestion/suggestion.slice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nexport const fetchSuggestion1 = console.log(\"Hello\");\n  \n\nexport const fetchSuggestion =\n  createAsyncThunk(/* Task 15: Complete the `createAsyncThunk()` function to load a suggestion from this URL: http://localhost:3004/api/suggestion */\n  \n  'suggestion/fetchSuggestion', async () => {\n    console.log(\"createAsyncThunk\");\n    const response= await fetch(\"http://localhost:3004/api/suggestion\"); \n    const jsonresponse = await response.json();\n    console.log(\"Hello\"+jsonresponse.status);\n    return jsonresponse;\n  });\n\nconst initialState = {\n  suggestion: '',\n  loading: false,\n  error: true,\n};\n\nconst options = {\n  name: 'suggestion',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchSuggestion.pending, (state) => {\n        console.log(state.status);\n        state.status = 'loading';\n      })\n      .addCase(fetchSuggestion.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        console.log(action.payload);\n        state.suggestion = action.payload;\n        console.log(state.suggestion);\n      })\n      .addCase(fetchSuggestion.rejected, (state, action) => {\n        console.log(state.status);\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  }\n};\n\nconst suggestionSlice = createSlice(options);\n\nexport default suggestionSlice.reducer;\n\n// Task 17: Create a selector, called `selectSuggestion`, for the `suggestion` state variable and export it from the file\nexport const selectSuggestion = (state) => state.suggestion.suggestion;\nexport const selectLoading = (state) => state.suggestion.loading;\nexport const selectError = (state) => state.suggestion.error;\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,gBAAgB,GAAGC,OAAO,CAACC,GAAR,CAAY,OAAZ,CAAzB;AAGP,OAAO,MAAMC,eAAe,GAC1BL,gBAAgB;AAAC;AAEjB,4BAFgB,EAEc,YAAY;EACxCG,OAAO,CAACC,GAAR,CAAY,kBAAZ;EACA,MAAME,QAAQ,GAAE,MAAMC,KAAK,CAAC,sCAAD,CAA3B;EACA,MAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;EACAN,OAAO,CAACC,GAAR,CAAY,UAAQI,YAAY,CAACE,MAAjC;EACA,OAAOF,YAAP;AACD,CARe,CADX;AAWP,MAAMG,YAAY,GAAG;EACnBC,UAAU,EAAE,EADO;EAEnBC,OAAO,EAAE,KAFU;EAGnBC,KAAK,EAAE;AAHY,CAArB;AAMA,MAAMC,OAAO,GAAG;EACdC,IAAI,EAAE,YADQ;EAEdL,YAFc;EAGdM,QAAQ,EAAE,EAHI;EAIdC,aAAa,EAAGC,OAAD,IAAa;IAC1BA,OAAO,CACJC,OADH,CACWf,eAAe,CAACgB,OAD3B,EACqCC,KAAD,IAAW;MAC3CnB,OAAO,CAACC,GAAR,CAAYkB,KAAK,CAACZ,MAAlB;MACAY,KAAK,CAACZ,MAAN,GAAe,SAAf;IACD,CAJH,EAKGU,OALH,CAKWf,eAAe,CAACkB,SAL3B,EAKsC,CAACD,KAAD,EAAQE,MAAR,KAAmB;MACrDF,KAAK,CAACZ,MAAN,GAAe,WAAf;MACAP,OAAO,CAACC,GAAR,CAAYoB,MAAM,CAACC,OAAnB;MACAH,KAAK,CAACV,UAAN,GAAmBY,MAAM,CAACC,OAA1B;MACAtB,OAAO,CAACC,GAAR,CAAYkB,KAAK,CAACV,UAAlB;IACD,CAVH,EAWGQ,OAXH,CAWWf,eAAe,CAACqB,QAX3B,EAWqC,CAACJ,KAAD,EAAQE,MAAR,KAAmB;MACpDrB,OAAO,CAACC,GAAR,CAAYkB,KAAK,CAACZ,MAAlB;MACAY,KAAK,CAACZ,MAAN,GAAe,QAAf;MACAY,KAAK,CAACR,KAAN,GAAcU,MAAM,CAACV,KAAP,CAAaa,OAA3B;IACD,CAfH;EAgBD;AArBa,CAAhB;AAwBA,MAAMC,eAAe,GAAG3B,WAAW,CAACc,OAAD,CAAnC;AAEA,eAAea,eAAe,CAACC,OAA/B,C,CAEA;;AACA,OAAO,MAAMC,gBAAgB,GAAIR,KAAD,IAAWA,KAAK,CAACV,UAAN,CAAiBA,UAArD;AACP,OAAO,MAAMmB,aAAa,GAAIT,KAAD,IAAWA,KAAK,CAACV,UAAN,CAAiBC,OAAlD;AACP,OAAO,MAAMmB,WAAW,GAAIV,KAAD,IAAWA,KAAK,CAACV,UAAN,CAAiBE,KAAhD"},"metadata":{},"sourceType":"module"}