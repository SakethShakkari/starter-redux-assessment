{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nexport const fetchSuggestion = createAsyncThunk(\n/* Task 15: Complete the `createAsyncThunk()` function to load a suggestion from this URL: http://localhost:3004/api/suggestion */\n'suggestion/fetchSuggestion', async () => {\n  const response = await fetch(\"http://localhost:3004/api/suggestion\");\n  const suggestion = await response.json();\n  return suggestion;\n});\nconst initialState = {\n  suggestion: '',\n  loading: false,\n  error: true\n};\nconst options = {\n  name: 'suggestion',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchSuggestion.pending, (state, action) => {});\n    /* Task 16: Inside `extraReducers`, add reducers to handle all three promise lifecycle states - pending, fulfilled, and rejected - for the `fetchSuggestion()` call */\n  }\n};\nconst suggestionSlice = createSlice(options);\nexport default suggestionSlice.reducer; // Task 17: Create a selector, called `selectSuggestion`, for the `suggestion` state variable and export it from the file\n\nexport const selectLoading = state => state.suggestion.loading;\nexport const selectError = state => state.suggestion.error;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchSuggestion","response","fetch","suggestion","json","initialState","loading","error","options","name","reducers","extraReducers","builder","addCase","pending","state","action","suggestionSlice","reducer","selectLoading","selectError"],"sources":["/Users/sshakkari/Documents/Thinkful/Redux/assessment/starter-redux-assessment/src/features/suggestion/suggestion.slice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nexport const fetchSuggestion =\n  createAsyncThunk(/* Task 15: Complete the `createAsyncThunk()` function to load a suggestion from this URL: http://localhost:3004/api/suggestion */\n  \n  'suggestion/fetchSuggestion', async () => {\n    const response= await fetch(\"http://localhost:3004/api/suggestion\"); \n    const suggestion = await response.json();\n    return suggestion;\n  });\n\nconst initialState = {\n  suggestion: '',\n  loading: false,\n  error: true,\n};\n\nconst options = {\n  name: 'suggestion',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchSuggestion.pending, (state,action)=>{})\n    /* Task 16: Inside `extraReducers`, add reducers to handle all three promise lifecycle states - pending, fulfilled, and rejected - for the `fetchSuggestion()` call */\n   \n  },\n};\n\nconst suggestionSlice = createSlice(options);\n\nexport default suggestionSlice.reducer;\n\n// Task 17: Create a selector, called `selectSuggestion`, for the `suggestion` state variable and export it from the file\n\nexport const selectLoading = (state) => state.suggestion.loading;\nexport const selectError = (state) => state.suggestion.error;\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,eAAe,GAC1BF,gBAAgB;AAAC;AAEjB,4BAFgB,EAEc,YAAY;EACxC,MAAMG,QAAQ,GAAE,MAAMC,KAAK,CAAC,sCAAD,CAA3B;EACA,MAAMC,UAAU,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAzB;EACA,OAAOD,UAAP;AACD,CANe,CADX;AASP,MAAME,YAAY,GAAG;EACnBF,UAAU,EAAE,EADO;EAEnBG,OAAO,EAAE,KAFU;EAGnBC,KAAK,EAAE;AAHY,CAArB;AAMA,MAAMC,OAAO,GAAG;EACdC,IAAI,EAAE,YADQ;EAEdJ,YAFc;EAGdK,QAAQ,EAAE,EAHI;EAIdC,aAAa,EAAGC,OAAD,IAAa;IAC1BA,OAAO,CAACC,OAAR,CAAgBb,eAAe,CAACc,OAAhC,EAAyC,CAACC,KAAD,EAAOC,MAAP,KAAgB,CAAE,CAA3D;IACA;EAED;AARa,CAAhB;AAWA,MAAMC,eAAe,GAAGlB,WAAW,CAACS,OAAD,CAAnC;AAEA,eAAeS,eAAe,CAACC,OAA/B,C,CAEA;;AAEA,OAAO,MAAMC,aAAa,GAAIJ,KAAD,IAAWA,KAAK,CAACZ,UAAN,CAAiBG,OAAlD;AACP,OAAO,MAAMc,WAAW,GAAIL,KAAD,IAAWA,KAAK,CAACZ,UAAN,CAAiBI,KAAhD"},"metadata":{},"sourceType":"module"}